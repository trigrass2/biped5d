/*****************************************************************************
 *        轨迹序列定义                                                       *
 *        SCUT, 2010                                                         *
 *        Author :                                                           *
 *        Version number :  0.10                                             *
 *        Date :            2010-12-08                                       *
 *****************************************************************************/
#include "MyPath.h"
#include "Setup.h"
#include <cstddef>

/*****************************************************************************
 * 函数：MyPath()
 * 功能：构造函数
 *****************************************************************************/
MyPath::MyPath()
{
   m_pdePoint = new std::deque <PointPVT>;

   for (int i=0; i<JOINT_NUM; i++)
   {
	  m_gdMotorRat[i] = 100 * 4096 / 360;
   }
}

/*****************************************************************************
 * 函数：~MyPath()
 * 功能：析构函数
 *****************************************************************************/
MyPath::~MyPath( void )
{
   delete m_pdePoint; // 销毁指针
   m_pdePoint = NULL;
}

/*****************************************************************************
 * 函数：Clear()
 * 功能：清除所有点
 *
 * 返回：
 *****************************************************************************/
void MyPath::Clear()
{
   m_pdePoint->clear(); // 清除队列里的所有元素
}

/*****************************************************************************
 * 函数：Set_Rat()
 * 功能：设置轴减速比
 *
 * 输入：double* rat - 轴减速比
 *
 * 返回：
 *****************************************************************************/
void MyPath::Set_Rat(double* rat)
{
	int i;
	// 初始化减速比
	for (i=0; i<JOINT_NUM; i++)
	{
		m_gdMotorRat[i] = rat[i] * 4096 / 360;
	}
}

/*****************************************************************************
 * 函数：AddPoint()
 * 功能：插入点
 *
 * 输入：PointPVT &p - 插入点
 *
 * 返回：const Error - 错误信息, Ok正常
 *****************************************************************************/
const Error *MyPath::AddPoint( PointPVT &p )
{
   // Add this segment to the end of my path
   m_pdePoint->push_back(p); // 插入队尾

   return Ok;;
}

/*****************************************************************************
 * 函数：GetDim()
 * 功能：获取点维数
 *
 * 返回：int - 点的维数
 *****************************************************************************/
int MyPath::GetDim( void )
{
   return JOINT_NUM;
}

/*****************************************************************************
 * 函数：GetSize()
 * 功能：获取点数
 *
 * 返回：int - 点数
 *****************************************************************************/
int MyPath::GetSize()
{
	return m_pdePoint->size();
}

/*****************************************************************************
 * 函数：NextSegment()
 * 功能：获取下一点位数据, 提供给CML使用
 *
 * 输出：uunit pos[] - 位置
 *       uunit vel[] - 速度
 *       uint8 &time - 时间
 *
 * 返回：const Error - 错误信息, Ok正常
 *****************************************************************************/
/*
const Error *MyPath::NextSegment( uunit pos[], uunit vel[], uint8 &time )
{
   PointPVT p;
   int i;
   
   if (m_pdePoint->size() > 0)
   {
		p = m_pdePoint->front(); // 获取队首元素
		m_pdePoint->pop_front(); // 删除队首元素

		Robot::I_Task.Set_CurrLine(p.Line);  // 当前运动行
   }
   else
   {
	   return &TrjError::NoneAvailable;
	   //return &PathError::Empty;
   }

   for (i=0; i<JOINT_NUM; i++)
   {
	   pos[i] = p.P[i] * m_gdMotorRat[i]; // deg转化为cts
	   vel[i] = p.V[i] * m_gdMotorRat[i]; // deg/s转化为cts/s
   }

   time = (uint8)(p.T * 1000); // s转化为ms

   return Ok;
}
*/